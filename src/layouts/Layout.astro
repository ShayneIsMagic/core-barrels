---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

export interface Props {
	title: string;
	description: string;
	currentPage: string;
}

const { title, description, currentPage } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<!-- Favicon Configuration -->
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="manifest" href="/site.webmanifest" />
		
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

    <!-- Security Headers -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />

    <!-- PWA Manifest -->
    <meta name="theme-color" content="#dc2626" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Weldco Blades" />

    <!-- DNS Prefetch for external resources -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="dns-prefetch" href="//www.google.com" />
    <link rel="dns-prefetch" href="//maps.googleapis.com" />

    <!-- Preload critical assets -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Space+Grotesk:wght@500;600;700&display=swap" rel="stylesheet">
    
    <!-- Preload critical images -->
    <link rel="preload" as="image" href="/images/weldco-logo.png" />
    <link rel="preload" as="image" href="/images/core-barrel-hero.jpg" />
    
    <!-- Slot for additional head content -->
    <slot name="head" />
	</head>
	<body>
    <Header currentPage={currentPage} />
		<main>
      <slot />
    </main>
    <Footer />

    <script>
      // Animate elements on scroll
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
  
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.style.animationDelay = `${Math.random() * 0.3}s`;
            entry.target.classList.add('animate-on-scroll');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);
  
      document.querySelectorAll('.stat-card, .feature-card, .case-study, .product-card, .state-card').forEach(el => {
        observer.observe(el);
      });
  
      // Performance optimization
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => {
          // Lazy load non-critical images
          const images = document.querySelectorAll('img[data-src]');
          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                imageObserver.unobserve(img);
              }
            });
          });
          
          images.forEach(img => imageObserver.observe(img));
        });
      }

      // Service Worker registration for PWA capabilities
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then(registration => {
              console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
              console.log('SW registration failed: ', registrationError);
            });
        });
      }
    </script>
	</body>
</html> 